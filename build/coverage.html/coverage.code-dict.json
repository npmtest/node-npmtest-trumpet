{"/home/travis/build/npmtest/node-npmtest-trumpet/test.js":"/* istanbul instrument in package npmtest_trumpet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-trumpet/lib.npmtest_trumpet.js":"/* istanbul instrument in package npmtest_trumpet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_trumpet = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_trumpet = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-trumpet/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-trumpet && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_trumpet */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_trumpet\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_trumpet.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_trumpet.rollup.js'] =\n            local.assetsDict['/assets.npmtest_trumpet.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_trumpet.__dirname +\n                    '/lib.npmtest_trumpet.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-trumpet/trumpet/index.js":"var Duplex = require('readable-stream').Duplex;\nvar inherits = require('inherits');\nvar through = require('through2');\nvar duplexer = require('duplexer2');\n\nvar tokenize = require('html-tokenize');\nvar select = require('html-select');\n\nvar wrapElem = require('./lib/wrap.js');\n\nmodule.exports = Trumpet;\ninherits(Trumpet, Duplex);\n\nfunction Trumpet () {\n    var self = this;\n    if (!(this instanceof Trumpet)) return new Trumpet;\n    Duplex.call(this);\n    this._tokenize = tokenize();\n    this._writing = false;\n    this._piping = false;\n    this._select = this._tokenize.pipe(select());\n    this._select.once('end', function () {\n        self.emit('_end');\n        self.push(null)\n    });\n    this.once('finish', function () { self._tokenize.end() });\n}\n\nTrumpet.prototype.pipe = function () {\n    this._piping = true;\n    return Duplex.prototype.pipe.apply(this, arguments);\n};\n\nTrumpet.prototype._read = function (n) {\n    var row;\n    var self = this;\n    var buf, read = 0;\n    var s = this._select;\n    while ((row = s.read()) !== null) {\n        if (row[0] === 'END') {\n            this.push(row[1][1])\n            read ++\n        }\n        else if (row[1] && row[1].length) {\n            this.push(row[1]);\n            read ++;\n        }\n    }\n    if (read === 0) s.once('readable', function () { self._read(n) });\n};\n\nTrumpet.prototype._write = function (buf, enc, next) {\n    if (!this._writing && !this._piping) {\n        this._piping = true;\n        this.resume();\n    }\n    return this._tokenize._write(buf, enc, next);\n};\n\nTrumpet.prototype.select = function (str, cb) {\n    var self = this;\n    var first = true;\n    \n    var res = self._selectAll(str, function (elem) {\n        if (!first) return;\n        first = false;\n        res.createReadStream = function () {};\n        res.createWriteStream = function () {};\n        res.createStream = function () {};\n        if (cb) cb(elem);\n    });\n    return res;\n};\n\nTrumpet.prototype.selectAll = function (str, cb) {\n    return this._selectAll(str, cb);\n};\n\nTrumpet.prototype._selectAll = function (str, cb) {\n    var self = this;\n    var readers = [], writers = [], duplex = [];\n    var gets = [], getss = [], sets = [], removes = [];\n    \n    this.once('_end', function () {\n        readers.splice(0).forEach(function (r) {\n            r.end();\n            r.resume();\n        });\n        \n        duplex.splice(0).forEach(function (d) {\n            d.input.end();\n            d.input.resume();\n        });\n    });\n    \n    var element, welem;\n    this._select.select(str, function (elem) {\n        element = elem;\n        welem = wrapElem(elem);\n        if (cb) cb(welem);\n        \n        elem.once('close', function () {\n            element = null;\n            welem = null;\n        });\n        \n        readers.splice(0).forEach(function (r) {\n            welem.createReadStream(r._options).pipe(r);\n        });\n        \n        writers.splice(0).forEach(function (w) {\n            w.pipe(welem.createWriteStream(w._options));\n        });\n        \n        duplex.splice(0).forEach(function (d) {\n            d.input.pipe(welem.createStream(d.options))\n                .pipe(d.output)\n            ;\n        });\n        \n        gets.splice(0).forEach(function (g) {\n            welem.getAttribute(g[0], g[1]);\n        });\n        \n        getss.splice(0).forEach(function (cb) {\n            welem.getAttributes(cb);\n        });\n        \n        sets.splice(0).forEach(function (g) {\n            welem.setAttribute(g[0], g[1]);\n        });\n        \n        removes.splice(0).forEach(function (key) {\n            welem.removeAttribute(key);\n        });\n    });\n    \n    return {\n        getAttribute: function (key, cb) {\n            if (welem) return welem.getAttribute(key, cb);\n            gets.push([ key, cb ]);\n            return this;\n        },\n        getAttributes: function (cb) {\n            getss.push(cb);\n            return this;\n        },\n        setAttribute: function (key, value) {\n            if (welem) return welem.setAttribute(key, value);\n            sets.push([ key, value ]);\n            return this;\n        },\n        removeAttribute: function (key) {\n            if (welem) return welem.removeAttribute(key);\n            removes.push(key);\n            return this;\n        },\n        createReadStream: function (opts) {\n            if (welem) return welem.createReadStream(opts);\n            var r = through();\n            r._options = opts;\n            readers.push(r);\n            return r;\n        },\n        createWriteStream: function (opts) {\n            if (welem) return welem.createWriteStream(opts);\n            var w = through();\n            w._options = opts;\n            writers.push(w);\n            return w;\n        },\n        createStream: function (opts) {\n            if (welem) return welem.createStream(opts);\n            var d = { input: through(), output: through() };\n            d.options = opts;\n            duplex.push(d);\n            return duplexer(d.input, d.output);\n        }\n    };\n};\n\nTrumpet.prototype.createReadStream = function (sel, opts) {\n    return this.select(sel).createReadStream(opts);\n};\n\nTrumpet.prototype.createWriteStream = function (sel, opts) {\n    return this.select(sel).createWriteStream(opts);\n};\n\nTrumpet.prototype.createStream = function (sel, opts) {\n    return this.select(sel).createStream(opts);\n};\n","/home/travis/build/npmtest/node-npmtest-trumpet/trumpet/lib/wrap.js":"var Duplex = require('readable-stream').Duplex;\nvar Readable = require('readable-stream').Readable;\nvar Writable = require('readable-stream').Writable;\n\nmodule.exports = function (elem) {\n    var welem = {};\n    \n    welem.name = elem.name;\n    \n    welem.getAttribute = function (key, cb) {\n        var value = elem.getAttribute(String(key).toLowerCase());\n        if (cb) cb(value);\n        return value;\n    };\n    \n    welem.getAttributes = function (cb) {\n        var attrs = elem.getAttributes();\n        if (cb) cb(attrs);\n        return attrs;\n    };\n    \n    welem.setAttribute = function (key, value) {\n        elem.setAttribute(key, value);\n    };\n    \n    welem.removeAttribute = function (key) {\n        elem.removeAttribute(key);\n    };\n    \n    welem.createReadStream = function (opts) {\n        if (!opts) opts = {};\n        \n        var rs = elem.createReadStream({ inner: !opts.outer });\n        var r = new Readable;\n        r._read = function read () {\n            var row, reads = 0;\n            while ((row = rs.read()) !== null) {\n                if (row[1].length) {\n                    r.push(row[1]);\n                    reads ++;\n                }\n            }\n            if (reads === 0) rs.once('readable', read);\n        };\n        rs.on('end', function () { r.push(null) });\n        \n        return r;\n    };\n    \n    welem.createWriteStream = function (opts) {\n        if (!opts) opts = {};\n        \n        var ws = elem.createWriteStream({ inner: !opts.outer });\n        var w = new Writable;\n        w._write = function (buf, enc, next) {\n            ws.write([ 'data', buf ]);\n            next();\n        };\n        w.on('finish', function () { ws.end() });\n        \n        return w;\n    };\n    \n    welem.createStream = function (opts) {\n        if (!opts) opts = {};\n        \n        var d = new Duplex;\n        var s = elem.createStream({ inner: !opts.outer });\n        \n        d._write = function (buf, enc, next) {\n            s.write([ 'data', buf ]);\n            next();\n        };\n        \n        d._read = function read () {\n            var row, reads = 0;\n            while ((row = s.read()) !== null) {\n                if (row[1].length) {\n                    d.push(row[1]);\n                    reads ++;\n                }\n            }\n            if (reads === 0) s.once('readable', read);\n        };\n        \n        d.on('finish', function () { s.end() });\n        s.on('end', function () { d.push(null) });\n        \n        return d;\n    };\n    \n    return welem;\n};\n"}